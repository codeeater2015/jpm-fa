var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberCreateModal = React.createClass({displayName: "HouseholdMemberCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    cellphone: "",
                    voterGroup: "",
                    assignedPrecinct: "",
                    precinctNo: "",
                    remarks: "",
                    inputVoterGroup: "KFC"
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#household-member-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-member-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#household-member-form #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-member-form #form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId: self.props.electId,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#relationship_select2").select2({
            casesentitive: false,
            placeholder: "Select relation",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_relationship'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.relationship, text: item.relationship };
                        })
                    };
                },
            }
        });


        $("#other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#household-member-form #municipality_select2").on("change", function () {
            self.setFieldValue("municipalityNo", $(this).val());
        });

        $("#household-member-form #barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#relationship_select2").on("change", function () {
            self.setFieldValue("relationship", $(this).val());
        });

        $("#other_position_select2").on("change", function () {
            self.setFieldValue("position", $(this).val());
        });

        $("#household-member-form #municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");

        $("#household-member-form #barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.barangayNo)
                .text(this.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.position = res.position;

            $("#other_position_select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphoneNo = "";
        form.data.firstname = "";
        form.data.lastname = "";
        form.data.middlename = "";
        form.data.extName = "";
        form.data.gender = "";
        form.data.birthdate = "";
        form.data.relationship = "";
        form.data.position = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");
        $("#relationship_select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setNewProfile: function (data) {
        var self = this;

        $("#form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.voterName))
            .trigger("change")
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },


    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.householdId = self.props.householdId;
        data.proId = self.props.proId;
        data.electId = self.props.electId;
        data.position = $("#other_position_select2").val();

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_household_detail"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.notify("Member has been added.", "teal");
        }).fail(function (err) {
            self.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Member Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: 3, 
                            electId: 423, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            onHide: this.closeNewVoterCreateModal, 
                            onSuccess: this.setNewProfile, 

                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "household-member-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('voterName')}, 
                                    React.createElement(ControlLabel, null, " Voter Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterName'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 


                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                    React.createElement(ControlLabel, null, " Remarks : "), 
                                    React.createElement("textarea", {rows: "5", value: this.state.form.data.remarks, className: "input-sm form-control", onChange: this.setFormProp, name: "remarks"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('remarks'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.HouseholdMemberCreateModal = HouseholdMemberCreateModal;

var HouseholdDetailDatatable = React.createClass({displayName: "HouseholdDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.householdId);
    },

    initDatatable: function (householdId) {
        var self = this;
        var grid = new Datatable();

        var project_recruitment_detail_datatable = $("#project_recruitment_detail_datatable");
        var grid_project_event = new Datatable();

        var url = Routing.generate("ajax_get_datatable_household_detail", { householdId: householdId }, true);

        grid_project_event.init({
            src: project_recruitment_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.voterName = $('#project_recruitment_detail_datatable input[name="voterName"]').val();
                        d.barangayName = $('#project_recruitment_detail_datatable input[name="barangayName"]').val();
                        d.householdId = self.props.householdId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left",
                        "render" : function(data,type,row){
                            return  row.is_non_voter == 1 ? '--- ' + data :  data;
                        }
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 100
                    },
                 
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 100,
                    },

                    {
                        "width": 60,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return deleteBtn;
                        }
                    }
                ],
            }
        });


        project_recruitment_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        // project_recruitment_detail_datatable.on('click', '.edit-button', function () {
        //     var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
        //     self.edit(data.voter_id);
        // });

        self.grid = grid_project_event;
    },

    edit: function (voterId) {
        this.setState({ showEditModal: true, target: voterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (householdDetailId) {
        var self = this;

        if (confirm("Are you sure you want to remove this member ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_household_detail", { householdDetailId: householdDetailId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self = this;
        $('#project_recruitment_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function () {
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        voterId: this.state.target, 
                        proId: this.props.proId}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "project_recruitment_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Cellphone #"), 
                                React.createElement("th", null, "Actions")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.HouseholdDetailDatatable = HouseholdDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberModal = React.createClass({displayName: "HouseholdMemberModal",
    getInitialState: function () {
        return {
            member: null,
            showAddMemberModal: false,
            header: {
                householdCode: "",
                voterName: "",
                barangayName: "",
                municipalityName: "",
                cellphone: "",
                lgc: {
                    voter_name: ""
                }
            }
        }
    },

    render: function () {
        var self = this;
        var data = self.state.header;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Information : ", data.voterName, " ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showAddMemberModal &&
                        React.createElement(HouseholdMemberCreateModal, {
                            proId: self.props.proId, 
                            provinceCode: 53, 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 

                            electId: self.props.electId, 
                            householdId: this.props.id, 
                            show: this.state.showAddMemberModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAddMemberModal}
                        ), 
                    
                    
                    React.createElement("div", {style: { marginBottom: "25px"}}, 
                        React.createElement("strong", null, "Household # : "), " ", this.state.header.householdCode, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Household Leader : "), " ", this.state.header.isNonVoter == 1 ? '---' + this.state.header.voterName : this.state.header.voterName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Municipality : "), " ", this.state.header.municipalityName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Barangay : "), "  ", this.state.header.barangayName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Cellphone : "), "  ", this.state.header.cellphone
                    ), 

                    React.createElement("div", {className: "col-md-3"}, 
                        React.createElement(FormGroup, {controlId: "formCellphoneNo"}, 
                            React.createElement(ControlLabel, null, " Cellphone No : "), 
                            React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.header.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"})
                        )
                    ), 

                    React.createElement("div", {className: "col-md-12", style: { marginBottom: "10px"}}, 
                        React.createElement("textarea", {rows: "5", placeholder: "Type notes here...", value: this.state.header.remarks, className: "input-sm form-control", onChange: this.setFormProp, name: "remarks"}
                        )
                    ), 
                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("button", {style: { float: "right"}, onClick: this.patchRemarks, type: "button", className: "btn btn-sm btn-primary"}, "Save Notes")
                    ), 

                    React.createElement("div", {className: "col-md-12", style: { paddingLeft: "0px", marginBottom: "10px"}}, 
                        React.createElement("button", {onClick: this.openAddMemberModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Member")
                    ), 

                    React.createElement(HouseholdDetailDatatable, {ref: "DetailDatatable", 
                        municipalityNo: this.state.header.municipalityNo, 
                        municipalityName: this.state.header.municipalityName, 
                        barangayNo: this.state.header.barangayNo, 
                        barangayName: this.state.header.barangayName, 
                        notify: this.props.notify, 
                        householdId: this.props.id, 
                        electId: self.props.electId, 
                        proId: self.props.proId
                    }
                    )

                )
            )
        );
    },

    componentDidMount: function () {
        this.loadHeader(this.props.id);
    },

    loadHeader: function (id) {
        var self = this;

        self.requestRecruiter = $.ajax({
            url: Routing.generate("ajax_get_household_header", { id: id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ header: res });
        });
    },

    setFormProp: function (e) {
        let header = this.state.header;
        header[ e.target.name] = e.target.value;

        this.setState({ header : header });
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    openAddMemberModal: function () {
        console.log("showing add member modal");
        this.setState({ showAddMemberModal: true })
    },

    closeAddMemberModal: function () {
        this.setState({ showAddMemberModal: false });
    },

    patchRemarks: function () {
        let self = this;

        let data = {
            remarks: this.state.header.remarks,
            contactNo : this.state.header.cellphone
        };

        console.log('data');
        console.log(data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_household_notes", { householdId: this.props.id }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.props.notify("Household has been updated.", 'teal');
            self.props.onDataPatched();
        }).fail(function (err) {
            self.props.notify("Validation failed !", 'ruby');
        });

        console.log('saving notes');

    }

});


window.HouseholdMemberModal = HouseholdMemberModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }

        if (!self.props.user.isAdmin) {
            $("#new-voter-create-form #municipality_select2").attr('disabled', 'disabled');
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var HierarchyProfileDatatable = React.createClass({displayName: "HierarchyProfileDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        //this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },


    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var kfc_attendance_profile = $("#kfc_attendance_profile");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get__hierarchy_datatable_household_profile", {proVoterId : self.props.proVoterId }, true);

        grid_project_event.init({
            src: kfc_attendance_profile,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "pageLength": 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId= self.props.hdrId;
                        d.voterName = $('#kfc_attendance_profile input[name="voter_name"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left",
                        "render" : function(data,type,row){
                            return  row.is_non_voter == 1 ? '--- ' + data :  data;
                        }
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 250,
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "is_non_voter",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data,type,row){
                            return Number.parseInt(data) == 1 ? "NO" : "YES";
                        }
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "width": 80,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup += deleteBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        kfc_attendance_profile.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        kfc_attendance_profile.on('click', '.delete-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this household profile?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_kfc_attendance_detail_profile", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
                self.props.reloadDetail();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showEditModal &&
                    React.createElement(KfcAttendanceListModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "kfc_attendance_profile", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Voter?"), 
                                React.createElement("th", null, "Contact No"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.HierarchyProfileDatatable = HierarchyProfileDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HierarchyProfileModal = React.createClass({displayName: "HierarchyProfileModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    voterId: null,
                    proVoterId: null
                },
                errors: []
            },
            showCreateModal: false,
            header : {
                municipalityNo : "",
                municipalityName : "",
                barangayNo : "",
                barangayName : ""
            }
        };
    },

    componentDidMount: function () {
        this.loadData(this.props.proVoterId);
        console.log("load data profile");
    },


    openCreateModal : function(){
        this.setState({ showCreateModal : true });
    },

    closeCreateModal : function(){
        this.setState({ showCreateModal : false});
    },

    loadData: function (proVoterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_household_header_by_leader_id", { id: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.proVoterId = res.pro_voter_id;
            form.data.cellphoneNo = self.isEmpty(res.cellphone) ? '' : res.cellphone;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
         
            form.data.municipalityName = res.municipality_name;
            form.data.municipalityNo = res.municipality_no;
            form.data.barangayName = res.barangay_name;
            form.data.barangayNo = res.barangay_no;
            form.data.voterName = res.voter_name;
            form.data.voterGroup = res.voter_group;
            form.data.householdId = res.household_id;

            self.setState({ form: form , householdId : res.household_id}, self.reinitSelect2);
        });
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, self.props.headerText, " Household Profile ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showCreateModal &&
                        React.createElement(HouseholdMemberCreateModal, {
                            proId: 3, 
                            provinceCode: 53, 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 

                            electId: 423, 
                            householdId: this.props.id, 
                            show: this.state.showCreateModal, 
                            onHide: this.closeCreateModal}
                        ), 
                    

                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("button", {type: "button", className: "btn btn-success btn-sm", style: { marginRight: "10px"}, onClick: this.openCreateModal}, "Add Household Members")
                        )
                    ), 

                    React.createElement(HierarchyProfileDatatable, {proVoterId: this.props.proVoterId})
                )
            )
        );
    },

    componentDidMount: function () {
        console.log("hierarchy profile modal has been loaded");
    },

});


window.HierarchyProfileModal = HierarchyProfileModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HierarchyItemEditModal = React.createClass({displayName: "HierarchyItemEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    voterId: null,
                    proVoterId: null
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "sm", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-recruit-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNo')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.contactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "contactNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('contactNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-12", style: { paddingRight: "0"}}, 
                                React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                    React.createElement(ControlLabel, null, "Position : "), 
                                    React.createElement("select", {id: "edit-voter-group-select2", className: "form-control input-sm"}, 
                                        React.createElement("option", {value: ""}, " ")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-default", type: "button", onClick: this.props.onHide}, " Close "), 
                                React.createElement("button", {className: "btn btn-primary", type: "submit", style: { marginLeft: "10px"}}, " Submit ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadData(this.props.proVoterId);
    },

    loadData: function (proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_hierarchy_item", { proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            console.log('update profile data has been received');
            console.log(res);
            var form = self.state.form;

            form.data = res;
            self.setState({ form: form }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#edit-voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#edit-voter-group-select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });
    },

    reinitSelect2: function () {
        var voterGroup = this.state.form.data.voterGroup;
        $("#edit-voter-group-select2").empty()
            .append($("<option />")
                .val(voterGroup)
                .text(voterGroup))
            .trigger("change");
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.voterGroup = $('#edit-voter-group-select2').val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_hierarchy_patch_item_info", { proVoterId: self.props.proVoterId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            console.log('patch complete');
            self.props.onSuccess();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.HierarchyItemEditModal = HierarchyItemEditModal;

var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var Hierarchy = React.createClass({displayName: "Hierarchy",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showSmsModal: false,
            showProfileModal: false,
            selectedItem: null,
            summary : {
                municipality_name : "",
                barangay_name : "",
                total_voter : 0,
                total_tl : 0,
                total_0 : 0,
                total_1 : 0,
                total_2 : 0,
                target_tl : 0,
                target_0 : 0,
                total_no_profile : 0
            },
            form: {
                data: {
                    leaderId: null,
                    assignedMunNo: null,
                    assignedBrgyNo: null,
                    assignedPurok: null,
                    voterGroup: null,
                    voterGroupFilter: null,
                    municipalityFilter: null,
                    barangayFilter: null,
                    voterNameFilter: null
                }
            }
        }
    },

    componentDidMount: function () {
        var self = this;

        $('#tree1').tree({
            dragAndDrop: true,
            autoOpen: true,
            onCreateLi: function (node, $li) {
                // Append a link to the jqtree-element div.
                // The link has an url '#node-[id]' and a data property 'node-id'.
                console.log(node.getLevel());

                let level = node.getLevel();
                let badgeColor = 'badge-light';

                switch (level) {
                    case 1:
                        badgeColor = 'badge-success';
                        break;
                    case 2:
                        badgeColor = 'badge-warning';
                        break;
                    case 3:
                        badgeColor = 'badge-danger';
                        break;
                    default:
                        badgeColor = 'badge-light';
                        break;
                }

                console.log("node name");
                console.log(node.name);

                let nameParts = node.name.split(":");

                console.log(nameParts);

                // 0 = position
                // 1 = name
                // 2 = municipality 
                // 3 = barangay 
                // 4 = household profile counts

                let customHtml = '<em><small style="padding-left:5px;"><span class="badge badge-pill ' + badgeColor + '"> level ' + level + '</span></small></em>'
                //let profileCounterHtml = '<small style="margin-top:3px;margin-left:5px;" class="badge badge-primary badge-pill"><span><i class="fa fa-user"></i><span>' + nameParts[4] + '</span></span></small>';

                //customHtml += profileCounterHtml;
                customHtml += '<a href="#node-' + node.id + '" class="btn btn-icon tree-delete" style="margin-top:0px;padding-top:0px;color:#e62044" data-node-id="' + node.id + '"><i data-node-id="' + node.id + '"class="fa fa-trash"></i></a>';



                $li.find('.jqtree-element').append(
                    customHtml
                );

                //$('#tree1').jstree('updateNode', node, nameParts[1])

            }
        });

        $('#tree1').on(
            'tree.move',
            function (event) {
                console.log('moved_node', event.move_info.moved_node);
                console.log('target_node', event.move_info.target_node);
                console.log('position', event.move_info.position);
                console.log('previous_parent', event.move_info.previous_parent);
                console.log("update item");

                let data = {
                    proVoterId: event.move_info.moved_node.id,
                    parentId: event.move_info.target_node.id,
                    nodeLevel: event.move_info.target_node.getLevel() + 1
                };

                if (data.parentId != null) {
                    self.requestPost = $.ajax({
                        url: Routing.generate("ajax_hierarchy_patch_item"),
                        data: data,
                        type: 'PATCH'
                    }).done(function (res) {
                        console.log("patch succeeded.");
                        let selectedItem = self.state.selectedItem;
                        selectedItem.proVoterId = data.proVoterId;

                        self.setState({ selectedItem: selectedItem }, self.openEditModal);
                    }).fail(function (err) {
                        self.setErrors(err.responseJSON);
                        console.log("ops! something went wrong");
                    });
                } else {
                    alert("State not saved. No target node was found.");
                }

            }
        );


        $('#tree1').on('click', '.tree-delete', function (e) {

            console.log('delete triggered');

            // Get the id from the 'node-id' data property
            var node_id = $(e.target).data('node-id');

            console.log('node id', node_id);

            // Get the node from the tree
            var node = $('#tree1').tree('getNodeById', node_id.toString());
            console.log('node', node);

            if (node) {
                if (node.getLevel() != 1) {
                    if (confirm("are you sure you want to continue deleting this entire branch?")) {
                        self.delete(node_id);
                    } else {
                        console.log('canceling');
                    }
                } else {
                    //self.delete(node_id);
                    alert("You dont have permission to remove level 1 branch");
                }
            }
        });

        $('#tree1').on(
            'tree.select',
            function (event) {
                if (event.node) {
                    // node was selected
                    var node = event.node;
                    var form = self.state.form;

                    //alert(node.name);
                    self.loadSelectedItem(node.id);
                    // form.data.leaderId = node.id;

                    // self.setState({ form : form });
                }
                else {
                    // event.node is null
                    // a node was deselected
                    // e.previous_node contains the deselected node
                    console.log("node deselected");
                    self.setState({ selectedItem: null })
                }
            }
        );

        this.initSelect2();
        this.loadSummaryData();
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },


    openCreateModal: function () {
        console.log("open sms modal");
        this.setState({ showCreateModal: true });
        console.log(this.state.showCreateModal);
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false });
        this.refs.bcbpDatatableRef.reload();
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false });
    },

    onCreateSuccess: function () {
        this.refs.attendanceDatatable.reload();
        this.setState({ showCreateModal: false });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    initSelect2: function () {
        var self = this;

        $("#hierarchy_page #voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 423,
                        proId: 3,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var isVoter = item.is_non_voter == 1 ? "NV" : "V";
                            var profileLabel = (item.position == '' || item.position == null) ? "No Profile" : item.position;

                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) ' + isVoter + " | " + profileLabel;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-head-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 423,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#hierarchy_page #municipality_filter_select2").val(),
                        brgyNo: $("#hierarchy_page #barangay_filter_select2").val(),
                        voterGroup: self.state.form.data.voterGroupFilter
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var isVoter = item.is_non_voter == 1 ? "NO" : "YES";
                            var voterGroup = item.voter_group;

                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - is voter? : ' + isVoter + '||' + voterGroup;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-group-filter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #purok_select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_purok'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.assigned_purok, text: item.assigned_purok };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #municipality_filter_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #barangay_filter_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#hierarchy_page #municipality_filter_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        var self = this;

        $("#hierarchy_page #voter-group-select2").on("change", function () {
            console.log("voter group has been selected");
            console.log($(this).val());
            var form = self.state.form;
            form.data.voterGroup = $(this).val();

            self.setState({ form: form });
        });

        $("#hierarchy_page #voter-group-filter-select2").on("change", function () {
            var form = self.state.form;
            form.data.voterGroupFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #municipality_select2").on("change", function () {

            self.setFieldValue("assignedMunNo", $(this).val());
        });

        $("#hierarchy_page #barangay_select2").on("change", function () {
            self.setFieldValue("assignedBrgyNo", $(this).val());
        });

        $("#hierarchy_page #municipality_filter_select2").on("change", function () {
            var form = self.state.form;
            form.data.municipalityFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #barangay_filter_select2").on("change", function () {
            var form = self.state.form;
            form.data.barangayFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #purok_select2").on("change", function () {
            self.setFieldValue("assignedPurok", $(this).val());
        });

        $("#hierarchy_page #voter-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

        $("#hierarchy_page #voter-head-select2").on("change", function () {
            console.log("head has been selected");
            console.log("reloading tree");

            let form = self.state.form;
            form.data.leaderId = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData)
        });

        $("#hierarchy_page #voter-group-filter-select2").empty()
            .append($("<option />")
                .val('TOP LEADER')
                .text('TOP LEADER'))
            .trigger("change");
    },


    loadHierarchyData: function () {
        var leaderId = this.state.form.data.leaderId;
        var voterGroupFilter = this.state.form.data.voterGroupFilter;
        var municipalityNo = this.state.form.data.municipalityFilter;
        var barangayNo = this.state.form.data.barangayFilter;

        var hierarchyRoute = Routing.generate("ajax_get_hierarchy_sample_data", {
            leaderId: leaderId,
            voterGroupFilter: voterGroupFilter,
            municipalityNo: municipalityNo,
            barangayNo: barangayNo
        });

        var self = this;
        self.requestHierarchyData = $.ajax({
            url: hierarchyRoute,
            type: "GET"
        }).done(function (res) {
            console.log("new data has been received");
            console.log(res);
            $('#tree1').tree("loadData", res);
        });

        self.loadSummaryData();
    },

    loadSummaryData: function () {
        var municipalityNo = this.state.form.data.municipalityFilter;
        var barangayNo = this.state.form.data.barangayFilter;

        var hierarchyRoute = Routing.generate("ajax_m_get_hierarchy_summary", {
            municipalityNo: municipalityNo,
            barangayNo: barangayNo
        });

        var self = this;
        self.requestHierarchyData = $.ajax({
            url: hierarchyRoute,
            type: "GET"
        }).done(function (res) {
            console.log("summary has been received");
            console.log(res);
            self.setState({ summary : res });
        });

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.contactNo = res.cellphone;
            console.log('voter recieved');

            console.log(form.data);

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.contactNo = '';

        self.setState({ form: form })
    },

    loadSelectedItem: function (proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_hierarchy_item", { proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            console.log('selected item has been received');
            console.log(res);
            self.setState({ selectedItem: res });
        });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    openEditModal: function () {
        this.setState({ showEditModal: true });
    },

    closeProfileModal: function () {
        this.setState({ showProfileModal: false });
    },

    onSuccessUpdate: function () {
        this.loadHierarchyData();
    },

    addItem: function () {
        console.log('adding item');
        let self = this;

        if (self.state.form.data.proVoterId != null) {
            let parentId = 0;
            let proceedAdd = true;

            if (self.state.selectedItem != null) {
                parentId = self.state.selectedItem.proVoterId;
            } else {
                proceedAdd = confirm("No parent node selected. Are you sure you want to add a root node?");
                parentId = 0;
            }

            console.log(parentId);


            if (proceedAdd) {

                parentId = parentId != null ? parentId : 0;
                var voterGroup = $('#hierarchy_page #voter-group-select2').val();

                parentId = voterGroup == 'TOP LEADER' ? 0 : parentId;

                if (parentId == 0) {
                    if (!confirm("Are you sure you want to add a root node?")) {
                        proceedAdd = false;
                    }
                }

                if (proceedAdd) {
                    let data = {
                        proVoterId: this.state.form.data.proVoterId,
                        parentId: parentId,
                        voterGroup: voterGroup,
                        assignedMunNo: this.state.form.data.assignedMunNo,
                        assignedBrgyNo: this.state.form.data.assignedBrgyNo,
                        assignedPurok: this.state.form.data.assignedPurok
                    };

                    console.log(data);

                    self.requestPost = $.ajax({
                        url: Routing.generate("ajax_hierarchy_post_item"),
                        data: data,
                        type: 'POST'
                    }).done(function (res) {
                        console.log("request succeeded.")
                        self.loadHierarchyData();
                        $("#hierarchy_page #voter-select2").empty().trigger("change");
                    }).fail(function (err) {

                        for (const [key, value] of Object.entries(err.responseJSON)) {
                            console.log(`Key: ${key}, Value: ${value}`);
                            self.notify(`${key} : ${value}`, "teal");
                        }
                        console.log("ops! something went wrong");
                    });
                }
            }
        } else {
            alert("Opps! Empty form!");
        }
    },

    delete: function (proVoterId) {
        var self = this;

        self.requestDeleteVoter = $.ajax({
            url: Routing.generate("ajax_delete_hierarchy_item", { proVoterId: proVoterId }),
            type: "DELETE"
        }).done(function (res) {
            console.log('item has been removed.');
            self.loadHierarchyData();
        }).fail(function (res) {
        });
    },

    openProfileModal: function () {
        if (this.state.selectedItem != null) {
            this.setState({ showProfileModal: true });
        }
    },

    numberWithCommas: function(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    },

    render: function () {
        var self = this;
        var selectedItem = this.state.selectedItem;
        var summary = this.state.summary;

        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body", id: "bcbp_component"}, 
                    
                        this.state.showEditModal &&
                        React.createElement(HierarchyItemEditModal, {
                            show: this.state.showEditModal, 
                            onHide: this.closeEditModal, 
                            onSuccess: this.onSuccessUpdate, 
                            proVoterId: this.state.selectedItem.proVoterId}
                        ), 
                    
                
                    
                        this.state.showProfileModal &&
                        React.createElement(HierarchyProfileModal, {
                            show: this.state.showProfileModal, 
                            onHide: this.closeProfileModal, 
                            proVoterId: this.state.selectedItem.hh_pro_voter_id, 
                            headerText: this.state.selectedItem.hh_voter_name}
                        ), 
                    
                    React.createElement("div", {className: "row", id: "hierarchy_page"}, 
                        React.createElement("div", {className: "col-md-4"}, 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formMunicipality"}, 
                                        React.createElement("select", {id: "municipality_filter_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formBarangay"}, 
                                        React.createElement("select", {id: "barangay_filter_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-4"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Position Filter : "), 
                                        React.createElement("select", {id: "voter-group-filter-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Name Filter: "), 
                                        React.createElement("select", {id: "voter-head-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("h3", null, React.createElement("strong", null, "Add Member:"))
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formMunicipality"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned City/Municipality"), 
                                        React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                    )
                                ), 

                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formBarangay"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned Barangay"), 
                                        React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formAssignedPurok"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned Purok / Sitio "), 
                                        React.createElement("select", {id: "purok_select2", className: "form-control form-filter input-sm", name: "assignedPurok"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('assignedPurok'))
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Position : "), 
                                        React.createElement("select", {id: "voter-group-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Name : "), 
                                        React.createElement("select", {id: "voter-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("button", {type: "button", className: "btn btn-success btn-lg", style: { width: "100%", marginRight: "10px", marginTop: "26px"}, onClick: this.addItem}, "Add Item")
                                )
                            )
                        ), 

                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("table", {className: "table table-condensed table-bordered"}, 
                                    React.createElement("tbody", {style: { backgroundColor: "#a4baeb"}}, 
                                        React.createElement("tr", null, 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "TL : ", self.numberWithCommas(parseInt(summary.total_tl)), " / ", self.numberWithCommas(parseInt(summary.target_tl))), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K0 : ", self.numberWithCommas(parseInt(summary.total_k0)), " / ", self.numberWithCommas(parseInt(summary.target_0))), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K1 : ", self.numberWithCommas(parseInt(summary.total_k1)), " / ", self.numberWithCommas(parseInt(summary.target_0) * 4)), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K2 : ", self.numberWithCommas(parseInt(summary.total_k2)), " / ", self.numberWithCommas(parseInt(summary.target_0) * 24)), 
                                            React.createElement("th", {rowSpan: "2", className: "text-center"}, "No Profile : ", self.numberWithCommas(parseInt(summary.total_no_profile)))
                                        )
                                    )
                                )
                            ), 
                            
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("div", {id: "tree1"})
                                )
                            )
                        ), 
                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("p", {className: "text-center"}, React.createElement("strong", null, "ACTIVE BRANCH OVERVIEW")), 
                            selectedItem != null ? (
                                React.createElement("div", null, 
                                    React.createElement("div", null, 
                                        React.createElement("a", {onClick: this.openProfileModal, style: { marginLeft: "5px"}, href: "#", className: "btn btn-sm btn-success m-btn m-btn--icon m-btn--icon-only"}, 
                                            React.createElement("i", {className: "fa fa-home"})
                                        ), 
                                        React.createElement("a", {onClick: this.openEditModal, style: { marginLeft: "5px"}, href: "#", className: "btn btn-sm btn-primary m-btn m-btn--icon m-btn--icon-only"}, 
                                            React.createElement("i", {className: "fa fa-edit"})
                                        )
                                    ), 
                                    React.createElement("br", null), 
                                    React.createElement("div", {className: "text-center", style: { fontSize: "1.2em", marginBottom: "10px", marginTop: "10px"}}, React.createElement("strong", null, selectedItem.voterName, " ")), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, " Registered Address : ")), " ", React.createElement("br", null), " ", selectedItem.municipalityName, ", ", selectedItem.barangayName), 
                                    React.createElement("div", {style: { marginBottom: "10px"}}, React.createElement("strong", null, " ", React.createElement("small", null, "is Voter :"), " "), " ", selectedItem.isNonVoter == 1 ? "NO" : "YES"), 
                                    React.createElement("div", {style: { marginBottom: "10px"}}, React.createElement("strong", null, React.createElement("small", null, "Assigned Address :")), " ", React.createElement("br", null), " ", selectedItem.assignedMunicipality, ",  ", selectedItem.assignedBarangay, ", ", selectedItem.assignedPurok), 

                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Contact # :")), "  ", selectedItem.voter.cellphone, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Hierarchy Position :")), " ", selectedItem.voter.voterGroup, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "HH Position :")), " ", selectedItem.voter.position, " "), 
                                    React.createElement("br", null), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Total Household Members :")), " ", selectedItem.members.length, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Voting Strength :")), " ", selectedItem.votingStrength.totalVoter, " / ", selectedItem.votingStrength.householdSize, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Within District : ")), " ", selectedItem.votingStrength.withinDistrict), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Outside District : ")), " ", selectedItem.votingStrength.outsideDistrict)
                                )
                            ) : ""
                        )
                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(Hierarchy, null),
        document.getElementById('page-container')
    );
}, 500);
