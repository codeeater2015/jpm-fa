var KamadaPrelistingDetailDatatable = React.createClass({displayName: "KamadaPrelistingDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.id);
    },

    initDatatable: function (id) {
        var self = this;
        var grid = new Datatable();

        var kamada_pre_listing_detail_datatable = $("#kamada_pre_listing_detail_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_datatable_kamada_prelisting_detail", { id: id }, true);

        grid_project_event.init({
            src: kamada_pre_listing_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.proId = self.props.proId;
                        d.voterName = $('#kamada_pre_listing_detail_datatable input[name="voterName"]').val();
                        d.voterGroup = $('#kamada_pre_listing_detail_datatable input[name="voterGroup"]').val();
                        d.hasAttended = $('#kamada_pre_listing_detail_datatable select[name="hasAttendedFilter"]').val();
                        d.hasNewId = $('#kamada_pre_listing_detail_datatable select[name="hasNewIdFilter"]').val();
                        d.hasClaimed = $('#kamada_pre_listing_detail_datatable select[name="hasClaimedFilter"]').val();
                        d.barangayName = $('#kamada_pre_listing_detail_datatable input[name="barangayName"]').val();
                        d.precinctNo = $('#kamada_pre_listing_detail_datatable input[name="precinctNo"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20 ,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-center",
                        "width": 150 ,
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 30,
                    },
                   
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": "10px",
                        "width": 60
                    },
                 
                    {
                        "width": 100,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return  deleteBtn;
                        }
                    }
                ],
            }
        });


        kamada_pre_listing_detail_datatable.on('click','.status-checkbox',function(e){
            var eventDetailId = e.target.value;
            var checked = e.target.checked;
            var fieldName = e.target.name;
            var newValue = checked ? 1 : 0;

            if(eventDetailId != null && checked != null){
                self.patchStatus(eventDetailId,fieldName,newValue);
            }
        });

        kamada_pre_listing_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        kamada_pre_listing_detail_datatable.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.pro_voter_id);
        });

        self.grid = grid_project_event;
    },

    patchStatus: function (eventDetailId, fieldName, value) {
        var self = this;
        var data = {};

        data[fieldName] = value;
        self.requestToggleRequirement = $.ajax({
            url: Routing.generate("ajax_patch_event_detail_status", { eventDetailId: eventDetailId }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            console.log("requirement patched");
        });
    },


    edit: function (voterId) {
        this.setState({ showEditModal: true, target: voterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to remove this voter ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_prelisting_detail", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self =  this;
        $('#kamada_pre_listing_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function(){
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        proVoterId: this.state.target, 
                        proId: this.props.proId}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "kamada_pre_listing_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Position"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterGroup", onChange: this.handleFilterChange})
                                ), 
                                
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.KamadaPrelistingDetailDatatable = KamadaPrelistingDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KamadaMemberCreateModal = React.createClass({displayName: "KamadaMemberCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    cellphone: "",
                    voterGroup: "",
                    municipalityNo : "",
                    barangayNo : "",
                    batchNo : ""
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#kamada-member-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#kamada-member-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#kamada-member-form #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#kamada-member-form #form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId: self.props.electId,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        
        $("#kamada-member-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select Position",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

          
        $("#kamada-member-form #batch_select2").select2({
            casesentitive: false,
            placeholder: "Select Batch",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_kamada_batch_no'),
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.batch_no, text: item.batch_no };
                        })
                    };
                },
            }
        });


        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#kamada-member-form #municipality_select2").on("change", function () {
            self.setFieldValue("municipalityNo", $(this).val());
        });

        $("#kamada-member-form #barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#kamada-member-form #voter_group_select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });

        $("#kamada-member-form #batch_select2").on("change", function () {
            self.setFieldValue("batchNo", $(this).val());
        });

        $("#kamada-member-form #municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");

        $("#kamada-member-form #barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.barangayNo)
                .text(this.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.voterGroup = res.voterGroup;

            $("#kamada-member-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.cellphone = '';
        form.data.voterGroup = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = null;
        form.data.cellphone = '';
        form.data.voterGroup = '';

        form.errors = [];

        $("#kamada-member-form #voter_group_select2").empty().trigger("change");
        $("#kamada-member-form #form-voter-select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setNewProfile: function (data) {
        var self = this;

        $("#form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.voterName))
            .trigger("change")
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },


    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.hdrId = self.props.hdrId;
        data.proId = self.props.proId;
        data.electId = self.props.electId;

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_kamada_detail"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.notify("Member has been added.", "teal");
        }).fail(function (err) {
            self.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Member Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: 3, 
                            electId: 423, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            onHide: this.closeNewVoterCreateModal, 
                            onSuccess: this.setNewProfile, 

                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "kamada-member-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Member Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 


                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBatch", validationState: this.getValidationState('voterGroup')}, 
                                    React.createElement(ControlLabel, null, " Position : "), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "batchNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBatch", validationState: this.getValidationState('batchNo')}, 
                                    React.createElement(ControlLabel, null, " Batch No. : "), 
                                    React.createElement("select", {id: "batch_select2", className: "form-control form-filter input-sm", name: "batchNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('batchNo'))
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.KamadaMemberCreateModal = KamadaMemberCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KamadaPrelistingAddAttendeeModal = React.createClass({displayName: "KamadaPrelistingAddAttendeeModal",

    getInitialState: function () {
        return {
            printMode: 'EVENT',
            profileEndpoint: "",
            municipalityName : "",
            brgyNo : "",
            unselected: [],
            options: [],
            form: {
                data: {
                    profiles: [],

                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
        this.initMultiSelect();
    },

    initSelect2: function () {
        var self = this;

        $("#kamada_prelisting_add_attendee_form #pre-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter municipality...",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        
        $("#kamada_prelisting_add_attendee_form #pre-barangay-select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#kamada_prelisting_add_attendee_form #pre-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        
        $("#kamada_prelisting_add_attendee_form #pre-barangay-select2").on("change", function () {
            console.log("loading profiles");
           self.loadProfiles();
        });
    },


    loadProfiles: function () {
        var self = this;
        var endpoint = Routing.generate("ajax_get_kamada_headers", {
            municipalityNo : $("#kamada_prelisting_add_attendee_form #pre-municipality-select2").val() , 
            brgyNo : $("#kamada_prelisting_add_attendee_form #pre-barangay-select2").val()
        });

        self.requestProfiles = $.ajax({
            url: endpoint,
            type: "GET"
        }).done(function (res) {
            self.setState({ options: res, unselected: res });
            console.log("kamada leaders has been received",res);
            setTimeout(self.refreshSelectBox, 2000);
        });
    },

    initMultiSelect: function () {
        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProfiles($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProfiles($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });


    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setProfiles: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.profiles = selected;
            unselected = this.state.options.filter(function (item) {
                return selected.indexOf(item.profile_no) == -1;
            });
        } else {
            form.data.profiles = [];
            unselected = this.state.options;
        }

        this.setState({ form: form, unselected: unselected });
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphone = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");

        this.setState({ form: form });
    },


    handleCheckbox: function (e) {
        var form = this.state.form;

        form.data[e.target.name] = e.target.checked ? 1 : 0;

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();
        var self = this;
        var data = self.state.form.data;

        self.requestTransmit = $.ajax({
            url: Routing.generate('ajax_post_kamada_prelisting_detail', { id: this.props.id }),
            type: 'POST',
            data: (data)
        }).done(function (res) {
            self.props.onSuccess();
            self.props.onHide();
        }).fail(function (res) {
            self.setErrors(res.responseJSON);
        });
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-85", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Add Attendees Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "kamada_prelisting_add_attendee_form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-3 no-padding"}, 
                            React.createElement(FormGroup, {controlId: "formBarangayNo"}, 
                                React.createElement(ControlLabel, null, " Municipality : "), 
                                React.createElement("select", {id: "pre-municipality-select2", className: "form-control input-sm"}
                                )
                            )
                        ), 
                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement(FormGroup, {controlId: "formBarangayNo"}, 
                                React.createElement(ControlLabel, null, " Barangay : "), 
                                React.createElement("select", {id: "pre-barangay-select2", className: "form-control input-sm"}
                                )
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 
                        React.createElement("div", {className: "col-md-12 no-padding"}, 
                            React.createElement("div", {className: "text-right"}, 
                                React.createElement("button", {type: "button", onClick: this.deselectAll, className: "btn btn-xs btn-default", style: { marginRight: "5px"}}, "Deselect All"), 
                                React.createElement("button", {type: "button", onClick: this.selectAll, className: "btn btn-xs btn-success"}, "Select All")
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "col-md-6 no-padding"}, 
                            React.createElement("div", null, React.createElement("strong", null, "Available :"), " ", this.state.unselected.length)
                        ), 
                        React.createElement("div", {className: "col-md-6 "}, 
                            React.createElement("div", {style: { marginLeft: "32px"}}, React.createElement("strong", null, "Selected : "), " ", this.state.form.data.profiles.length)
                        ), 
                        React.createElement(FormGroup, {controlId: "formProfiles", validationState: this.getValidationState('profiles')}, 
                            React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "contracts", name: "profiles[]"}, 
                                this.state.options.map(function (item) {
                                    return (React.createElement("option", {key: item.pro_voter_id, value: item.id}, item.voter_name, " (", item.voter_group, ") - ", item.barangay_name))
                                })
                            ), 
                            React.createElement("div", {className: "text-right"}, 
                                React.createElement(HelpBlock, null, this.getError('profiles'))
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 
                        React.createElement("div", {className: "text-right m-t-md"}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", onClick: this.props.onHide}, "Cancel"), 
                            React.createElement("button", {type: "submit", className: "btn btn-primary"}, "Submit")
                        )
                    )
                )
            )
        );
    }
});


window.KamadaPrelistingAddAttendeeModal = KamadaPrelistingAddAttendeeModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KamadaPrelistingModal = React.createClass({displayName: "KamadaPrelistingModal",
    getInitialState: function () {
        return {
            proIdCode: null,
            member: null,
            showAttendeeModal: false,
            showAttendeeBatchModal: false,
            events: [],
            selectedEvent: null
        }
    },

    render: function () {
        var self = this;
        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Prelisting")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("button", {onClick: this.openAttendeeModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Attendees"), 
                     
                        this.state.showAttendeeModal &&
                        React.createElement(KamadaPrelistingAddAttendeeModal, {
                            id: this.props.id, 
                            show: this.state.showAttendeeModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAttendeeModal}
                        ), 
                    


                    React.createElement(KamadaPrelistingDetailDatatable, {ref: "DetailDatatable", proId: this.props.proId, notify: this.props.notify, id: this.props.id})
                )
            )
        );
    },


    componentDidMount: function () {
        this.loadEvents();
    },

    setFormProp: function (e) {
        this.setState({ proIdCode: e.target.value }, this.search);
    },

    search: function () {
        var self = this;
        var proIdCode = this.state.proIdCode;

        if (proIdCode != null && proIdCode != "") {
            setTimeout(function () {
                self.requestMember = $.ajax({
                    url: Routing.generate("ajax_get_project_voter_alt", { proIdCode: proIdCode, proId: self.props.proId }),
                    type: "GET"
                }).done(function (res) {

                    if (res.status == 'A') {
                        self.setState({ member: res }, self.add);
                    } else {
                        alert("Opps! Cant add to the list of attendees. Voter either blocked or deactivated");
                    }
                }).fail(function () {
                    console.log("member not found");
                    self.setState({ member: null });
                });
            }, 2000);
        }
    },

    loadEvents: function () {
        var self = this;

        self.requestEvents = $.ajax({
            url: Routing.generate("ajax_get_project_event_headers"),
            type: "GET"
        }).done(function (res) {
            console.log("events has been received");
            console.log(res);
            self.setState({ events: res });
        });
    },

    appendEventMembers: function () {
        var self = this;

        console.log("event id");
        console.log(self.state.selectedEvent);

        self.appendMembers = $.ajax({
            url: Routing.generate("ajax_post_project_event_header_append"),
            data: {
                eventId: self.state.selectedEvent,
                currentEventId: self.props.eventId
            },
            type: "POST"
        }).done(function (res) {
            console.log("members has been added");
            self.refs.DetailDatatable.reload();
            self.setState({ selectedEvent: null });
        }).fail(function () {
            console.log('failed to append members');
        });
    },

    setSelectedEvent: function (e) {
        this.setState({ selectedEvent: e.target.value });
    },

    add: function () {
        var self = this;

        self.requestMember = $.ajax({
            url: Routing.generate("ajax_post_project_event_detail"),
            data: {
                proVoterId: this.state.member.pro_voter_id,
                proId: this.props.proId,
                proIdCode: this.state.member.pro_id_code,
                eventId: this.props.eventId
            },
            type: "POST"
        }).done(function (res) {
            self.refs.DetailDatatable.reload();
            self.setState({ proIdCode: "" });
        }).fail(function () {
            self.setState({ proIdCode: "" });
        });
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    reloadFilteredDatatable: function (precinctNo) {
        this.refs.DetailDatatable.reloadFiltered(precinctNo);
    },

    openAttendeeModal: function () {
        this.setState({ showAttendeeModal: true });
    },

    closeAttendeeModal: function () {
        this.setState({ showAttendeeModal: false });
    },

    openAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: true });
    },

    closeAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: false });
    },

    showAttendaceSummary: function () {
        console.log("showing attendance summary");
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/kfc/attendance-summary/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Attendance Summary', 900, 600);
    },

    showAllAttendees: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },


    showAllAttendeesByPosition: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance-by-position/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },

    showAllAttendeesByBarangay: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance-by-barangay/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },

    showNewPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees', 900, 600);
    },

    showNewAllPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-all/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All New Expecteed Attendees', 900, 600);
    },

    showNewByBarangayPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-by-barangay/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees by Barangay', 900, 600);
    },

    showNewByAssignedPrecinctPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-by-assigned-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees by Assigned Precinct', 900, 600);
    },

    showNewAllByAssignedPrecinctPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-all-by-assigned-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All New Expecteed Attendees By Assigned Precinct', 900, 600);
    },

    showStabs: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs', 900, 600);
    },

    showStabsByBarangay: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab-by-barangay/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs', 900, 600);
    },


    showStabsByPrecinct: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab-by-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs By Precinct No', 900, 600);
    },

    showOldPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-old/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of Old Attendees', 900, 600);
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    }
});


window.KamadaPrelistingModal = KamadaPrelistingModal;
var KamadaPrelistingDatatable = React.createClass({displayName: "KamadaPrelistingDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showAttendanceModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res });
        });
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var kforce_list_table = $("#kforce_list_table");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_kamada_prelisting", {}, true);

        grid_project_event.init({
            src: kforce_list_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.electId = $('#voter_component #election_select2').val();
                        d.provinceCode = $('#voter_component #province_select2').val();
                        d.proId = $('#voter_component #project_select2').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [0, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "data": "prelisting_desc" },
                    {
                        "data": "prelisting_date",
                        "width": 100,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            return moment(data).format('MMM DD, YYYY');
                        }
                    },
                    {
                        "width" : 70,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green-dark edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";
                            var attendanceBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green attendance-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-calendar'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return attendanceBtn + deleteBtn;
                        }
                    }
                ],
            }
        });

        kforce_list_table.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.event_id });
        });

        kforce_list_table.on('click', '.attendance-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showAttendanceModal: true, target: data.id });
        });

        kforce_list_table.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    closeAttendanceModal: function () {
        this.setState({ showAttendanceModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this prelisting?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_kamada_prelisting_header", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", {className: "bg-grey", style: { padding : "20px" , borderRadius : "10px"}}, 
                
                    this.state.showCreateModal &&
                    React.createElement(KamadaPrelistingCreateModal, {
                        show: this.state.showCreateModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeCreateModal}
                    ), 
                

                
                    this.state.showEditModal &&
                    React.createElement(KforceEditModal, {
                        eventId: this.state.target, 
                        show: this.state.showEditModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeEditModal}
                    ), 
                

                
                    this.state.showAttendanceModal &&
                    React.createElement(KamadaPrelistingModal, {
                        id: this.state.target, 
                        show: this.state.showAttendanceModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeAttendanceModal}
                    ), 
                

                React.createElement("div", {className: "row "}, 
                    React.createElement("div", {className: "col-md-5"}, 
                        React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Create new listing")
                    )
                ), 

                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("div", {className: "table-container", style: { marginTop: "20px" , backgroundColor: "white", padding : "20px", borderRadius : "20px"}}, 
                            React.createElement("table", {id: "kforce_list_table", className: "table table-condensed table-bordered", width: "100%"}, 
                                React.createElement("thead", null, 
                                    React.createElement("tr", null, 
                                        React.createElement("th", {className: "text-center"}, "No"), 
                                        React.createElement("th", {className: "text-center"}, "Prelisting Desc"), 
                                        React.createElement("th", {className: "text-center"}, "Date"), 
                                        React.createElement("th", {width: "90px"})
                                    ), 
                                    React.createElement("tr", null, 
                                        React.createElement("td", null), 
                                        React.createElement("td", {style: { padding: "10px 5px"}}, 
                                            React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "idx_no", onChange: this.handleFilterChange})
                                        ), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null)
                                    )
                                ), 
                                React.createElement("tbody", null
                                )
                            )
                        )
                    )
                )
            )
        )
    }
});

window.KamadaPrelistingDatatable = KamadaPrelistingDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KamadaPrelistingCreateModal = React.createClass({displayName: "KamadaPrelistingCreateModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                    eventName : "",
                    eventDate : null
                },
                errors : []
            }
        };
    },

    render : function(){
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop : "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Create New KForce List")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "event-form"}, 
                        React.createElement(FormGroup, {controlId: "formPrelistingDesc", validationState: this.getValidationState('prelistingDesc')}, 
                            React.createElement(ControlLabel, null, " Description : "), 
                            React.createElement(FormControl, {bsClass: "form-control input-sm", name: "prelistingDesc", value: this.state.form.data.prelistingDesc, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('prelistingDesc'))
                        ), 

                        React.createElement("div", {className: "col-md-4", style: { paddingRight : "0" , paddingLeft : "0"}}, 
                            React.createElement(FormGroup, {controlId: "formPrelistingDate", validationState: this.getValidationState('prelistingDate')}, 
                                React.createElement(ControlLabel, null, " Date : "), 
                                React.createElement(FormControl, {type: "date", bsClass: "form-control input-sm", name: "prelistingDate", value: this.state.form.data.prelistingDate, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('prelistingDate'))
                            )
                        ), 
                        
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                            React.createElement(ControlLabel, null, " Remarks : "), 
                            React.createElement(FormControl, {componentClass: "textarea", rows: "6", bsClass: "form-control input-sm", name: "remarks", value: this.state.form.data.remarks, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('remarks'))
                        ), 

                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginLeft : "10px"}, onClick: this.props.onHide}, "Close")
                        )
                        
                    )
                )
            )
        );
    },

    componentDidMount : function(){
    
    },

    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;
        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.errors = [];

      this.setState({form : form});
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_kamada_prelisting"),
            data: data,
            type: 'POST'
        }).done(function(res){
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function(err){
             self.setErrors(err.responseJSON);
        });
    }
});


window.KamadaPrelistingCreateModal = KamadaPrelistingCreateModal;
var KamadaPrelistingComponent = React.createClass({displayName: "KamadaPrelistingComponent",
    render : function(){
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    React.createElement(KamadaPrelistingDatatable, null)
                )
            )
        )
    }
});

setTimeout(function(){
    ReactDOM.render(
    React.createElement(KamadaPrelistingComponent, null),
        document.getElementById('page-container')
    );
},500);
