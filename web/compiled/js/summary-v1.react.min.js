var SummaryV1AllTable = React.createClass({displayName: "SummaryV1AllTable",

    getInitialState: function () {
        return {
            data: []
        }
    },

    componentDidMount: function () {
        this.loadSummary();
    },

    loadSummary: function () {
        var self = this;
        self.requestUser = $.ajax({
            url: Routing.generate("ajax_m_get_summary_v1", { 
                summaryDate : self.props.summaryDate,
                municipalityNo : self.props.municipalityNo
             }),
            type: "GET"
        }).done(function (res) {
            self.setState({ data: res });
        });
    },

    numberWithCommas: function (x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    render: function () {
        let data = this.state.data;
        let self = this;

        let gPrecincts = 0;
        let gVoters = 0;

        let gTargetTl = 0;
        let gActualTL = 0;

        let gTargetK0 = 0;
        let gActualK0 = 0;
        let gNoHHK0 = 0;

        let gTargetK1 = 0;
        let gActualK1 = 0;
        let gNoHHK1 = 0;

        let gTargetK2 = 0;
        let gActualK2 = 0;
        let gNoHHK2 = 0;

        let gHHMembers = 0;
        let gVerified = 0;

        return (
            React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-md-12"}, 
                    React.createElement("div", {className: "table-container"}, 
                        React.createElement("table", {id: "summary_table", className: "table table-condensed table-bordered", width: "100%"}, 
                            React.createElement("thead", {className: "bg-green-meadow"}, 
                                React.createElement("tr", null, 
                                    React.createElement("th", {rowSpan: "2"}, "No"), 
                                    React.createElement("th", {rowSpan: "2"}, "Barangay"), 
                                    React.createElement("th", {rowSpan: "2"}, "Prec"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Reg Voters"), 
                                    React.createElement("th", {colSpan: "2", className: "text-center"}, "TL"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K0"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K1"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K2"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "HH Members"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Total Verified"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "K4orce & KFC")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "K4orce Only")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "TUPAD")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "TUPAD Non-KFC")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "Aics/Akap")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "Aics/Akap Non-KFC"))
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH")

                                )
                            ), 
                            React.createElement("tbody", {className: "bg-white"}, 
                                data.map((item, index) => {
                                    gPrecincts += Number.parseInt(item.total_precincts);
                                    gVoters += Number.parseInt(item.total_registered_voter);
                                    gTargetTl += Number.parseInt(item.target_tl);
                                    gActualTL += Number.parseInt(item.actual_tl);

                                    gTargetK0 += Number.parseInt(item.target_k0);
                                    gActualK0 += Number.parseInt(item.actual_k0);
                                    gNoHHK0 += Number.parseInt(item.no_profile_k0);


                                    gTargetK1 += Number.parseInt(item.target_k1);
                                    gActualK1 += Number.parseInt(item.actual_k1);
                                    gNoHHK1 += Number.parseInt(item.no_profile_k1);

                                    gTargetK2 += Number.parseInt(item.target_k2);
                                    gActualK2 += Number.parseInt(item.actual_k2);
                                    gNoHHK2 += Number.parseInt(item.no_profile_k2);

                                    gHHMembers += Number.parseInt(item.hh_members);
                                    gVerified += Number.parseInt(item.total_verified);

                                    if (self.props.displayDetail) {
                                        return (
                                            React.createElement("tr", null, 
                                                React.createElement("td", {className: "text-center"}, ++index), 
                                                React.createElement("td", {className: "text-center"}, item.barangay_name), 
                                                React.createElement("td", {className: "text-center"}, self.numberWithCommas(item.total_precincts)), 
                                                React.createElement("td", {className: "text-center"}, self.numberWithCommas(item.total_registered_voter)), 

                                                React.createElement("td", {className: "text-center"}, item.target_tl == 0 ? "" : self.numberWithCommas(item.target_tl)), 
                                                React.createElement("td", {className: "text-center"}, item.actual_tl == 0 ? "" : self.numberWithCommas(item.actual_tl)), 

                                                React.createElement("td", {className: "text-center"}, item.target_k0 == 0 ? "" : self.numberWithCommas(item.target_k0)), 
                                                React.createElement("td", {className: "text-center"}, item.actual_k0 == 0 ? "" : self.numberWithCommas(item.actual_k0)), 
                                                React.createElement("td", {className: "text-center"}, item.no_profile_k0 == 0 ? "" : self.numberWithCommas(item.no_profile_k0)), 

                                                React.createElement("td", {className: "text-center"}, item.target_k1 == 0 ? "" : self.numberWithCommas(item.target_k1)), 
                                                React.createElement("td", {className: "text-center"}, item.actual_k1 == 0 ? "" : self.numberWithCommas(item.actual_k1)), 
                                                React.createElement("td", {className: "text-center"}, item.no_profile_k1 == 0 ? "" : self.numberWithCommas(item.no_profile_k1)), 

                                                React.createElement("td", {className: "text-center"}, item.target_k2 == 0 ? "" : self.numberWithCommas(item.target_k2)), 
                                                React.createElement("td", {className: "text-center"}, item.actual_k2 == 0 ? "" : self.numberWithCommas(item.actual_k2)), 
                                                React.createElement("td", {className: "text-center"}, item.no_profile_k2 == 0 ? "" : self.numberWithCommas(item.no_profile_k2)), 

                                                React.createElement("td", {className: "text-center"}, item.hh_members == 0 ? "" : self.numberWithCommas(item.hh_members)), 
                                                React.createElement("td", {className: "text-center"}, item.total_verified == 0 ? "" : self.numberWithCommas(item.total_verified)), 

                                                React.createElement("td", null), 
                                                React.createElement("td", null), 
                                                React.createElement("td", null), 
                                                React.createElement("td", null), 
                                                React.createElement("td", null), 
                                                React.createElement("td", null)
                                            )
                                        );
                                    }
                                }), 

                                React.createElement("tr", null, 
                                    React.createElement("td", {colSpan: "2"}, "Total"), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gPrecincts))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gVoters))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gTargetTl))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualTL == 0 ? "" : self.numberWithCommas(gActualTL))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK0 == 0 ? "" : self.numberWithCommas(gTargetK0))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK0 == 0 ? "" : self.numberWithCommas(gActualK0))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK0 == 0 ? "" : self.numberWithCommas(gNoHHK0))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK1 == 0 ? "" : self.numberWithCommas(gTargetK1))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK1 == 0 ? "" : self.numberWithCommas(gActualK1))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK1 == 0 ? "" : self.numberWithCommas(gNoHHK1))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK2 == 0 ? "" : self.numberWithCommas(gTargetK2))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK2 == 0 ? "" : self.numberWithCommas(gActualK2))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK2 == 0 ? "" : self.numberWithCommas(gNoHHK2))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gHHMembers == 0 ? "" : self.numberWithCommas(gHHMembers))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gVerified == 0 ? "" : self.numberWithCommas(gVerified))), 

                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"})



                                )
                            )


                        )

                    )
                )
            )
        )
    }
});

window.SummaryV1AllTable = SummaryV1AllTable;
var SummaryV1Table = React.createClass({displayName: "SummaryV1Table",

    getInitialState: function () {
        return {
            data: []
        }
    },

    componentDidMount: function () {
        this.loadSummary();
    },

    loadSummary: function () {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_m_get_summary_v1", { 
                clusterName: self.props.clusterName , 
                summaryDate : self.props.summaryDate,
                municipalityNo : self.props.municipalityNo
             }),
            type: "GET"
        }).done(function (res) {
            self.setState({ data: res });
        });
    },

    numberWithCommas : function(x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    render: function () {
        let data = this.state.data;
        let self = this;

        let gPrecincts = 0;
        let gVoters = 0;

        let gTargetTl = 0;
        let gActualTL = 0;

        let gTargetK0 = 0;
        let gActualK0 = 0;
        let gNoHHK0 = 0;

        let gTargetK1 = 0;
        let gActualK1 = 0;
        let gNoHHK1 = 0;

        let gTargetK2 = 0;
        let gActualK2 = 0;
        let gNoHHK2 = 0;

        let gHHMembers = 0;
        let gVerified = 0;

        return (
            React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-md-12"}, 
                    React.createElement("div", {className: "table-container"}, 
                        React.createElement("table", {id: "summary_table", className: "table table-condensed table-bordered", width: "100%"}, 
                            React.createElement("thead", {className: "bg-green-meadow"}, 
                                React.createElement("tr", null, 
                                    React.createElement("th", {rowSpan: "2"}, "No"), 
                                    React.createElement("th", {rowSpan: "2"}, "Barangay"), 
                                    React.createElement("th", {rowSpan: "2"}, "Prec"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Reg Voters"), 
                                    React.createElement("th", {colSpan: "2", className: "text-center"}, "TL"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K0"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K1"), 
                                    React.createElement("th", {colSpan: "3", className: "text-center"}, "K2"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "HH Members"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Total Verified"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "K4orce & KFC")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "K4orce Only")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "TUPAD")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "TUPAD Non-KFC")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "Aics/Akap")), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, React.createElement("small", null, "Aics/Akap Non-KFC"))
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH"), 

                                    React.createElement("th", {className: "text-center"}, "Target"), 
                                    React.createElement("th", {className: "text-center"}, "Actual"), 
                                    React.createElement("th", {className: "text-center"}, "No HH")

                                )
                            ), 
                            React.createElement("tbody", {className: "bg-white"}, 
                                data.map((item, index) => {
                                    gPrecincts += Number.parseInt(item.total_precincts);
                                    gVoters += Number.parseInt(item.total_registered_voter);
                                    gTargetTl += Number.parseInt(item.target_tl);
                                    gActualTL += Number.parseInt(item.actual_tl);

                                    gTargetK0 += Number.parseInt(item.target_k0);
                                    gActualK0 += Number.parseInt(item.actual_k0);
                                    gNoHHK0 += Number.parseInt(item.no_profile_k0);

                                    
                                    gTargetK1 += Number.parseInt(item.target_k1);
                                    gActualK1 += Number.parseInt(item.actual_k1);
                                    gNoHHK1 += Number.parseInt(item.no_profile_k1);
                                    
                                    gTargetK2 += Number.parseInt(item.target_k2);
                                    gActualK2 += Number.parseInt(item.actual_k2);
                                    gNoHHK2 += Number.parseInt(item.no_profile_k2);

                                    gHHMembers += Number.parseInt(item.hh_members);
                                    gVerified += Number.parseInt(item.total_verified);

                                    return (
                                        React.createElement("tr", null, 
                                            React.createElement("td", {className: "text-center"}, ++index), 
                                            React.createElement("td", {className: "text-center"}, item.barangay_name), 
                                            React.createElement("td", {className: "text-center"}, self.numberWithCommas(item.total_precincts)), 
                                            React.createElement("td", {className: "text-center"}, self.numberWithCommas(item.total_registered_voter)), 

                                            React.createElement("td", {className: "text-center"}, item.target_tl == 0 ? "" : self.numberWithCommas(item.target_tl)), 
                                            React.createElement("td", {className: "text-center"}, item.actual_tl == 0 ? "" : self.numberWithCommas(item.actual_tl)), 

                                            React.createElement("td", {className: "text-center"}, item.target_k0 == 0 ? "" : self.numberWithCommas(item.target_k0)), 
                                            React.createElement("td", {className: "text-center"}, item.actual_k0 == 0 ? "" : self.numberWithCommas(item.actual_k0)), 
                                            React.createElement("td", {className: "text-center"}, item.no_profile_k0 == 0 ? "" : self.numberWithCommas(item.no_profile_k0)), 

                                            React.createElement("td", {className: "text-center"}, item.target_k1 == 0 ? "" : self.numberWithCommas(item.target_k1)), 
                                            React.createElement("td", {className: "text-center"}, item.actual_k1 == 0 ? "" : self.numberWithCommas(item.actual_k1)), 
                                            React.createElement("td", {className: "text-center"}, item.no_profile_k1 == 0 ? "" : self.numberWithCommas(item.no_profile_k1)), 

                                            React.createElement("td", {className: "text-center"}, item.target_k2 == 0 ? "" : self.numberWithCommas(item.target_k2)), 
                                            React.createElement("td", {className: "text-center"}, item.actual_k2 == 0 ? "" : self.numberWithCommas(item.actual_k2)), 
                                            React.createElement("td", {className: "text-center"}, item.no_profile_k2 == 0 ? "" : self.numberWithCommas(item.no_profile_k2)), 

                                            React.createElement("td", {className: "text-center"}, item.hh_members == 0 ? "" : self.numberWithCommas(item.hh_members)), 
                                            React.createElement("td", {className: "text-center"}, item.total_verified == 0 ? "" : self.numberWithCommas(item.total_verified)), 

                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null)
                                        )
                                    );
                                }), 

                                React.createElement("tr", null, 
                                    React.createElement("td", {colSpan: "2"}, "Total"), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gPrecincts))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gVoters))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, self.numberWithCommas(gTargetTl))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualTL == 0 ? "" : self.numberWithCommas(gActualTL))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK0 == 0 ? "" : self.numberWithCommas(gTargetK0))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK0 == 0 ? "" : self.numberWithCommas(gActualK0))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK0 == 0 ? "" : self.numberWithCommas(gNoHHK0))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK1 == 0 ? "" : self.numberWithCommas(gTargetK1))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK1 == 0 ? "" : self.numberWithCommas(gActualK1))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK1 == 0 ? "" : self.numberWithCommas(gNoHHK1))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTargetK2 == 0 ? "" : self.numberWithCommas(gTargetK2))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gActualK2 == 0 ? "" : self.numberWithCommas(gActualK2))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoHHK2 == 0 ? "" : self.numberWithCommas(gNoHHK2))), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gHHMembers == 0 ? "" : self.numberWithCommas(gHHMembers))), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gVerified  == 0 ? "" : self.numberWithCommas(gVerified))), 

                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"}), 
                                    React.createElement("td", {className: "text-center"})



                                )
                            )


                        )

                    )
                )
            )
        )
    }
});

window.SummaryV1Table = SummaryV1Table;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SummaryV1Component = React.createClass({displayName: "SummaryV1Component",

    getInitialState: function () {
        return {
            municipalityNo: "",
            summaryDate: ""
        }
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#summary_v1_table #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#summary_v1_table #date_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_summary_date'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.summary_date, text: item.summary_date };
                        })
                    };
                },
            }
        });



        $("#summary_v1_table #municipality_select2").on("change", function () {
            self.setState({ municipalityNo: $(this).val() })
        });

        $("#summary_v1_table #date_select2").on("change", function () {
            self.setState({ summaryDate: $(this).val() })
        });
    },


    render: function () {
        let municipalityNo = this.state.municipalityNo;
        let summaryDate = this.state.summaryDate;

        console.log(municipalityNo);
        console.log(summaryDate);

        return (
            React.createElement("div", {id: "summary_v1_table", className: "portlet light portlet-fit bordered bg-grey"}, 
                React.createElement("div", {className: "portlet-body "}, 
                    React.createElement("h2", null, "Organization Summary"), 
                    React.createElement("br", null), 

                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                )
                            )
                        ), 

                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement(FormGroup, {controlId: "formBarangay"}, 
                                React.createElement("label", {className: "control-label"}, "Barangay"), 
                                React.createElement("select", {id: "date_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                )
                            )
                        )
                    ), 

                    (this.state.municipalityNo == '16' && this.state.summaryDate != "" && this.state.summaryDate != null) ? (
                        React.createElement("div", null, 
                            React.createElement("h3", null, React.createElement("strong", null, "Overall Total")), 
                            React.createElement(SummaryV1AllTable, {municipalityNo: 16, displayDetail: false, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "North Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C3", municipalityNo: 16, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "North West Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C4", municipalityNo: 16, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "Poblacion Big Brgy Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C1", municipalityNo: 16, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "Poblacion Small Brgy Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C2", municipalityNo: 16, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "South Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C5", municipalityNo: 16, summaryDate: this.state.summaryDate}), 
                            React.createElement("h3", null, React.createElement("strong", null, "WestCoast Cluster")), 
                            React.createElement(SummaryV1Table, {clusterName: "C6", municipalityNo: 16, summaryDate: this.state.summaryDate})
                        )
                    )
                        : "", 

                    

                    (this.state.municipalityNo == '01' && this.state.summaryDate != "" && this.state.summaryDate != null) ? (
                        React.createElement("div", null, 
                            React.createElement(SummaryV1AllTable, {municipalityNo: '01', displayDetail: true, summaryDate: this.state.summaryDate})
                        )
                    )
                        : ""
                    
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(SummaryV1Component, null),
        document.getElementById('page-container')
    );
}, 500);
