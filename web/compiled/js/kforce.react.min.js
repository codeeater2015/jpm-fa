var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }

        if (!self.props.user.isAdmin) {
            $("#new-voter-create-form #municipality_select2").attr('disabled', 'disabled');
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KforceEditModal = React.createClass({displayName: "KforceEditModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                    eventName : "",
                    eventDate : null,
                    status : ""
                },
                errors : []
            }
        };
    },

    render : function(){
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop : "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit Kforce Group")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "event-form"}, 
                        React.createElement(FormGroup, {controlId: "formEventName", validationState: this.getValidationState('eventName')}, 
                            React.createElement(ControlLabel, null, " Description : "), 
                            React.createElement(FormControl, {bsClass: "form-control input-sm", name: "eventName", value: this.state.form.data.eventName, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('eventName'))
                        ), 

                        React.createElement("div", {className: "col-md-4", style: { paddingRight : "0" , paddingLeft : "0"}}, 
                            React.createElement(FormGroup, {controlId: "formEventDate", validationState: this.getValidationState('eventDate')}, 
                                React.createElement(ControlLabel, null, " Date : "), 
                                React.createElement(FormControl, {type: "date", bsClass: "form-control input-sm", name: "eventDate", value: this.state.form.data.eventDate, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('eventDate'))
                            )
                        ), 
                        
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement(FormGroup, {controlId: "formEventDesc", validationState: this.getValidationState('eventDesc')}, 
                            React.createElement(ControlLabel, null, " Remarks : "), 
                            React.createElement(FormControl, {componentClass: "textarea", rows: "6", bsClass: "form-control input-sm", name: "eventDesc", value: this.state.form.data.eventDesc, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('eventDesc'))
                        ), 

                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount : function(){
        console.log("event id");
        console.log(this.props.eventId);
        this.loadEvent(this.props.eventId);
    },

    loadEvent : function(eventId){
        var self = this;

        self.requestEvent = $.ajax({
            url : Routing.generate("ajax_get_kforce_header", { eventId : eventId }),
            type : "GET"
        }).done(function(res){
            var form  = self.state.form;
            form.data = res;
            form.data.eventDate = self.isEmpty(res.eventDate) ? null : moment(res.eventDate).format('YYYY-MM-DD');

            self.setState({ form : form });
        });
    },

    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;
        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.errors = [];

      this.setState({form : form});
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        
        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_kforce_header",{ eventId : self.props.eventId }),
            data: data,
            type: 'PATCH'
        }).done(function(res){
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function(err){
             self.setErrors(err.responseJSON);
        });
    }
});


window.KforceEditModal = KforceEditModal;
var KforceDetailDatatable = React.createClass({displayName: "KforceDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.eventId);
    },

    initDatatable: function (eventId) {
        var self = this;
        var grid = new Datatable();

        var project_event_detail_datatable = $("#project_event_detail_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_datatable_kforce_detail", { eventId: eventId }, true);

        grid_project_event.init({
            src: project_event_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.proId = self.props.proId;
                        d.voterName = $('#project_event_detail_datatable input[name="voterName"]').val();
                        d.voterGroup = $('#project_event_detail_datatable input[name="voterGroup"]').val();
                        d.hasAttended = $('#project_event_detail_datatable select[name="hasAttendedFilter"]').val();
                        d.hasNewId = $('#project_event_detail_datatable select[name="hasNewIdFilter"]').val();
                        d.hasClaimed = $('#project_event_detail_datatable select[name="hasClaimedFilter"]').val();
                        d.barangayName = $('#project_event_detail_datatable input[name="barangayName"]').val();
                        d.precinctNo = $('#project_event_detail_datatable input[name="precinctNo"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20 ,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-center",
                        "width": 150 ,
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": 30,
                    },
                   
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "precinct_no",
                        "className": "text-center",
                        "width": "10px",
                        "width": 60
                    },
                 
                    {
                        "width": 100,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return  deleteBtn;
                        }
                    }
                ],
            }
        });


        project_event_detail_datatable.on('click','.status-checkbox',function(e){
            var eventDetailId = e.target.value;
            var checked = e.target.checked;
            var fieldName = e.target.name;
            var newValue = checked ? 1 : 0;

            if(eventDetailId != null && checked != null){
                self.patchStatus(eventDetailId,fieldName,newValue);
            }
        });

        project_event_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.event_detail_id);
        });

        project_event_detail_datatable.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.pro_voter_id);
        });

        self.grid = grid_project_event;
    },

    patchStatus: function (eventDetailId, fieldName, value) {
        var self = this;
        var data = {};

        data[fieldName] = value;
        self.requestToggleRequirement = $.ajax({
            url: Routing.generate("ajax_patch_event_detail_status", { eventDetailId: eventDetailId }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            console.log("requirement patched");
        });
    },


    edit: function (voterId) {
        this.setState({ showEditModal: true, target: voterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (eventDetailId) {
        var self = this;

        if (confirm("Are you sure you want to remove this voter ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_kforce_detail", { eventDetailId: eventDetailId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self =  this;
        $('#project_event_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function(){
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        proVoterId: this.state.target, 
                        proId: this.props.proId}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "project_event_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "POS"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Precinct"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterGroup", onChange: this.handleFilterChange})
                                ), 
                                
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.KforceDetailDatatable = KforceDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KforceAddAttendeeModal = React.createClass({displayName: "KforceAddAttendeeModal",

    getInitialState: function () {
        return {
            showNewVoterCreateModal: false,
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    cellphone: "",
                    voterGroup: "",
                    position: "",
                    assignedPrecinct: "",
                    precinctNo: "",
                    remarks: ""
                },
                errors: []
            },
            tempVoter: {
                hasPhoto: "",
                hasId: "",
                lastEvent: {
                    event_name: ""
                }
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 3000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: 3,
                        electId: 423,
                        provinceCode: 53,
                        municipalityNo: $("#municipality-select2").val()

                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            // var disabled = false;

                            // if(item.status != 'A'){
                            //     disabled = true;
                            //     text += " Opps! Voter either blocked or deactivated... Please notify the system administrator...";
                            // }


                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter municipality...",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#position-select2").select2({
            casesentitive: false,
            placeholder: "Enter Barangay Position",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

        $("#voter-group-select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });

        $("#position-select2").on("change", function () {
            self.setFieldValue("position", $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.voterId = res.voterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? '' : res.voterGroup;
            form.data.position = self.isEmpty(res.position) ? '' : res.position;
            form.data.assignedPrecinct = self.isEmpty(res.assignedPrecinct) ? '' : res.assignedPrecinct;
            form.data.precinctNo = self.isEmpty(res.precinctNo) ? '' : res.precinctNo;
            form.data.is1 = res.is1;
            form.data.is2 = res.is2;
            form.data.is3 = res.is3;
            form.data.is4 = res.is4;
            form.data.is5 = res.is5;
            form.data.is6 = res.is6;
            form.data.is7 = res.is7;
            form.data.is8 = res.is8;
            form.data.is9 = res.is9;
            form.data.is10 = res.is10;
            form.data.remarks = res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");


            $("#position-select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change");


            console.log("voter form", form);

            self.setState({ form: form, tempVoter: res });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.voterGroup = '';
        form.data.position = '';
        form.data.is1 = null;
        form.data.is2 = null;
        form.data.is3 = null;
        form.data.is4 = null;
        form.data.is5 = null;
        form.data.is6 = null;
        form.data.is7 = null;
        form.data.is8 = null;
        form.data.is9 = null;
        form.data.is10 = null;

        form.data.remarks = '';

        self.setState({
            form: form, tempVoter: {
                hasPhoto: "",
                hasId: "",
                lastEvent: {
                    event_name: ""
                }
            }
        });
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphone = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");

        this.setState({ form: form });
    },


    handleCheckbox: function (e) {
        var form = this.state.form;

        form.data[e.target.name] = e.target.checked ? 1 : 0;

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.eventId = self.props.eventId;
        data.proId = self.props.proId;

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_kforce_add_attendee"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.props.onSuccess("");
            self.props.notify("Attendee has been added.", "teal");
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to update this record.", "ruby");
            } else {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        console.log('opening modal');
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Attendee Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: 3, 
                            electId: 423, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            notify: this.props.notify, 
                            onHide: this.closeNewVoterCreateModal}
                        ), 
                    
                    React.createElement("form", {id: "kforce_attendee_form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('proVoterId')}, 
                                            React.createElement(ControlLabel, null, " Voter Name : "), 
                                            React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                        )

                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement("button", {style: { marginTop: "26px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " Add Non-voter ")
                                    )
                                ), 

                                React.createElement("div", {className: "col-md-6", style: { paddingLeft: "0"}}, 
                                    React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                        React.createElement(ControlLabel, null, " Cellphone No : "), 
                                        React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                        React.createElement(HelpBlock, null, this.getError('cellphone'))
                                    )
                                ), 

                                React.createElement("div", {className: "col-md-6", style: { paddingRight: "0"}}, 
                                    React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                        React.createElement(ControlLabel, null, "Position: "), 
                                        React.createElement("select", {id: "voter-group-select2", className: "form-control input-sm"}, 
                                            React.createElement("option", {value: ""}, " ")
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                    )
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.KforceAddAttendeeModal = KforceAddAttendeeModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KforceDetailModal = React.createClass({displayName: "KforceDetailModal",
    getInitialState: function () {
        return {
            proIdCode: null,
            member: null,
            showAttendeeModal: false,
            showAttendeeBatchModal: false,
            events: [],
            selectedEvent: null
        }
    },

    render: function () {
        var self = this;

        if (this.state.member != null) {
            var generatedIdNo = this.state.member.generated_id_no;
            var photoUrl = window.imgUrl + this.props.proId + '_' + generatedIdNo + "?" + new Date().getTime();
        }

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Kforce List")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("button", {onClick: this.openAttendeeModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Attendees"), 
                    
                        this.state.showAttendeeModal &&
                        React.createElement(KforceAddAttendeeModal, {
                            eventId: this.props.eventId, 
                            show: this.state.showAttendeeModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadFilteredDatatable, 
                            onHide: this.closeAttendeeModal}
                        ), 
                    

                    React.createElement(KforceDetailDatatable, {ref: "DetailDatatable", proId: this.props.proId, notify: this.props.notify, eventId: this.props.eventId})
                )
            )
        );
    },


    componentDidMount: function () {
        this.loadEvents();
    },

    setFormProp: function (e) {
        this.setState({ proIdCode: e.target.value }, this.search);
    },

    search: function () {
        var self = this;
        var proIdCode = this.state.proIdCode;

        if (proIdCode != null && proIdCode != "") {
            setTimeout(function () {
                self.requestMember = $.ajax({
                    url: Routing.generate("ajax_get_project_voter_alt", { proIdCode: proIdCode, proId: self.props.proId }),
                    type: "GET"
                }).done(function (res) {

                    if (res.status == 'A') {
                        self.setState({ member: res }, self.add);
                    } else {
                        alert("Opps! Cant add to the list of attendees. Voter either blocked or deactivated");
                    }
                }).fail(function () {
                    console.log("member not found");
                    self.setState({ member: null });
                });
            }, 2000);
        }
    },

    loadEvents: function () {
        var self = this;

        self.requestEvents = $.ajax({
            url: Routing.generate("ajax_get_project_event_headers"),
            type: "GET"
        }).done(function (res) {
            console.log("events has been received");
            console.log(res);
            self.setState({ events: res });
        });
    },

    appendEventMembers: function () {
        var self = this;

        console.log("event id");
        console.log(self.state.selectedEvent);

        self.appendMembers = $.ajax({
            url: Routing.generate("ajax_post_project_event_header_append"),
            data: {
                eventId: self.state.selectedEvent,
                currentEventId: self.props.eventId
            },
            type: "POST"
        }).done(function (res) {
            console.log("members has been added");
            self.refs.DetailDatatable.reload();
            self.setState({ selectedEvent: null });
        }).fail(function () {
            console.log('failed to append members');
        });
    },

    setSelectedEvent: function (e) {
        this.setState({ selectedEvent: e.target.value });
    },

    add: function () {
        var self = this;

        self.requestMember = $.ajax({
            url: Routing.generate("ajax_post_project_event_detail"),
            data: {
                proVoterId: this.state.member.pro_voter_id,
                proId: this.props.proId,
                proIdCode: this.state.member.pro_id_code,
                eventId: this.props.eventId
            },
            type: "POST"
        }).done(function (res) {
            self.refs.DetailDatatable.reload();
            self.setState({ proIdCode: "" });
        }).fail(function () {
            self.setState({ proIdCode: "" });
        });
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    reloadFilteredDatatable: function (precinctNo) {
        this.refs.DetailDatatable.reloadFiltered(precinctNo);
    },

    openAttendeeModal: function () {
        this.setState({ showAttendeeModal: true });
    },

    closeAttendeeModal: function () {
        this.setState({ showAttendeeModal: false });
    },

    openAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: true });
    },

    closeAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: false });
    },

    showAttendaceSummary: function () {
        console.log("showing attendance summary");
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/kfc/attendance-summary/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Attendance Summary', 900, 600);
    },

    showAllAttendees: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },


    showAllAttendeesByPosition: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance-by-position/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },

    showAllAttendeesByBarangay: function () {
        var url = "http://" + window.hostIp + ":83/jpm/event-attendance-by-barangay/?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All Attendees', 900, 600);
    },

    showNewPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees', 900, 600);
    },

    showNewAllPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-all/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All New Expecteed Attendees', 900, 600);
    },

    showNewByBarangayPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-by-barangay/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees by Barangay', 900, 600);
    },

    showNewByAssignedPrecinctPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-by-assigned-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of New Attendees by Assigned Precinct', 900, 600);
    },

    showNewAllByAssignedPrecinctPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-new-all-by-assigned-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of All New Expecteed Attendees By Assigned Precinct', 900, 600);
    },

    showStabs: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs', 900, 600);
    },

    showStabsByBarangay: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab-by-barangay/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs', 900, 600);
    },


    showStabsByPrecinct: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/voter-stab-by-precinct/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'Stabs By Precinct No', 900, 600);
    },

    showOldPrintout: function () {
        var url = "http://" + window.hostIp + ":8100/voter-report/web/voter/attendance-old/index.php?event_id=" + this.props.eventId;
        this.popupCenter(url, 'List of Old Attendees', 900, 600);
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    }
});


window.KforceDetailModal = KforceDetailModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var KforceCreateModal = React.createClass({displayName: "KforceCreateModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                    eventName : "",
                    eventDate : null
                },
                errors : []
            }
        };
    },

    render : function(){
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop : "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Create New KForce List")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "event-form"}, 
                        React.createElement(FormGroup, {controlId: "formEventName", validationState: this.getValidationState('eventName')}, 
                            React.createElement(ControlLabel, null, " Description : "), 
                            React.createElement(FormControl, {bsClass: "form-control input-sm", name: "eventName", value: this.state.form.data.eventName, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('eventName'))
                        ), 

                        React.createElement("div", {className: "col-md-4", style: { paddingRight : "0" , paddingLeft : "0"}}, 
                            React.createElement(FormGroup, {controlId: "formEventDate", validationState: this.getValidationState('eventDate')}, 
                                React.createElement(ControlLabel, null, " Date : "), 
                                React.createElement(FormControl, {type: "date", bsClass: "form-control input-sm", name: "eventDate", value: this.state.form.data.eventDate, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('eventDate'))
                            )
                        ), 
                        
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement(FormGroup, {controlId: "formEventDesc", validationState: this.getValidationState('eventDesc')}, 
                            React.createElement(ControlLabel, null, " Remarks : "), 
                            React.createElement(FormControl, {componentClass: "textarea", rows: "6", bsClass: "form-control input-sm", name: "eventDesc", value: this.state.form.data.eventDesc, onChange: this.setFormProp}), 
                            React.createElement(HelpBlock, null, this.getError('eventDesc'))
                        ), 

                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginLeft : "10px"}, onClick: this.props.onHide}, "Close")
                        )
                        
                    )
                )
            )
        );
    },

    componentDidMount : function(){
    
    },

    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;
        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.errors = [];

      this.setState({form : form});
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_kforce_header"),
            data: data,
            type: 'POST'
        }).done(function(res){
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function(err){
             self.setErrors(err.responseJSON);
        });
    }
});


window.KforceCreateModal = KforceCreateModal;
var KforceDatatable = React.createClass({displayName: "KforceDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showAttendanceModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res });
        });
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var kforce_list_table = $("#kforce_list_table");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_kforce", {}, true);

        grid_project_event.init({
            src: kforce_list_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.electId = $('#voter_component #election_select2').val();
                        d.provinceCode = $('#voter_component #province_select2').val();
                        d.proId = $('#voter_component #project_select2').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [0, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "data": "event_name" },
                    {
                        "data": "event_date",
                        "width": 100,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            return moment(data).format('MMM DD, YYYY');
                        }
                    },
                    {
                        "data": "event_date",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return "";
                        }
                    },
                    {
                        "data": "event_date",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return "";
                        }
                    },
                    {
                        "data": "event_date",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return "";
                        }
                    },
                    {
                        "data": "event_date",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return "";
                        }
                    },
                    {
                        "data": "event_date",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return "";
                        }
                    },
                    {
                        "width" : 70,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green-dark edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";
                            var attendanceBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green attendance-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-calendar'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return editBtn + attendanceBtn + deleteBtn;
                        }
                    }
                ],
            }
        });

        kforce_list_table.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.event_id });
        });

        kforce_list_table.on('click', '.attendance-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showAttendanceModal: true, target: data.event_id });
        });

        kforce_list_table.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.event_id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    closeAttendanceModal: function () {
        this.setState({ showAttendanceModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    delete: function (eventId) {
        var self = this;

        if (confirm("Are you sure you want to delete this event?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_kforce_header", { eventId: eventId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", {className: "bg-grey", style: { padding : "20px" , borderRadius : "10px"}}, 
                
                    this.state.showCreateModal &&
                    React.createElement(KforceCreateModal, {
                        show: this.state.showCreateModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeCreateModal}
                    ), 
                

                
                    this.state.showEditModal &&
                    React.createElement(KforceEditModal, {
                        eventId: this.state.target, 
                        show: this.state.showEditModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeEditModal}
                    ), 
                

                
                    this.state.showAttendanceModal &&
                    React.createElement(KforceDetailModal, {
                        eventId: this.state.target, 
                        show: this.state.showAttendanceModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeAttendanceModal}
                    ), 
                

                React.createElement("div", {className: "row "}, 
                    React.createElement("div", {className: "col-md-5"}, 
                        React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "New Kforce List")
                    )
                ), 

                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("div", {className: "table-container", style: { marginTop: "20px" , backgroundColor: "white", padding : "20px", borderRadius : "20px"}}, 
                            React.createElement("table", {id: "kforce_list_table", className: "table table-condensed table-bordered", width: "100%"}, 
                                React.createElement("thead", null, 
                                    React.createElement("tr", null, 
                                        React.createElement("th", {className: "text-center"}, "No"), 
                                        React.createElement("th", {className: "text-center"}, "List Description"), 
                                        React.createElement("th", {className: "text-center"}, "Date "), 
                                        React.createElement("th", {className: "text-center"}, "Voter"), 
                                        React.createElement("th", {className: "text-center"}, "Non Voter"), 
                                        React.createElement("th", {className: "text-center"}, "KFC & KFORCE"), 
                                        React.createElement("th", {className: "text-center"}, "KFORCE ONLY"), 
                                        React.createElement("th", {className: "text-center"}, "TOTAL"), 
                                        React.createElement("th", {width: "90px"})
                                    ), 
                                    React.createElement("tr", null, 
                                        React.createElement("td", null), 
                                        React.createElement("td", {style: { padding: "10px 5px"}}, 
                                            React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "idx_no", onChange: this.handleFilterChange})
                                        ), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null)
                                    )
                                ), 
                                React.createElement("tbody", null
                                )
                            )
                        )
                    )
                )
            )
        )
    }
});

window.KforceDatatable = KforceDatatable;
var KforceComponent = React.createClass({displayName: "KforceComponent",

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    render: function () {
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body bg-grey-gallery"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: " col-md-12"}, 
                            React.createElement("p", {className: "bg-white", style: { padding : "15px", fontSize:"1.5em", borderTopLeftRadius:"10px", borderTopRightRadius : "10px"}}, "KForce Encoding")
                        )
                    ), 
                    React.createElement(KforceDatatable, null)
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(KforceComponent, null),
        document.getElementById('page-container')
    );
}, 500);
